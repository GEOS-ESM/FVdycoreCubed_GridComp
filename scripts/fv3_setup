#!/bin/tcsh -f

#######################################################################
#                            Define Colors
#         Note:  For No Colors, set C1 and C2 to NONE
#######################################################################

set BLACK   = `tput setaf 0`
set RED     = `tput setaf 1`
set GREEN   = `tput setaf 2`
set YELLOW  = `tput setaf 3`
set BLUE    = `tput setaf 4`
set MAGENTA = `tput setaf 5`
set CYAN    = `tput setaf 6`
set WHITE   = `tput setaf 7`
set RESET   = `tput sgr0`
set BOLD    = `tput bold`
set COLORS  = `echo $BLACK $RED $GREEN $YELLOW $BLUE $MAGENTA $CYAN $WHITE $RESET`

if( -e $HOME/.FV3SETUP ) then
     set FV3SETUPinfo = `cat $HOME/.FV3SETUP`
     set C1 = $FV3SETUPinfo[1]
     set C2 = $FV3SETUPinfo[2]
else
     set C1 = $RED
     set C2 = $BLUE
endif
     set CN = $RESET

#######################################################################
#                     Build Directory Locations
#######################################################################

# Set Current Working Path to fv3_setup
# -------------------------------------
setenv ARCH `uname -s`
setenv NODE `uname -n`

if ($ARCH == Darwin) then
   set FINDPATH = realpath
   set PRELOAD_COMMAND = 'DYLD_INSERT_LIBRARIES'
   set LD_LIBRARY_PATH_CMD = 'DYLD_LIBRARY_PATH'
   # On macOS we seem to need to call mpirun directly and not use esma_mpirun
   # For some reason SIP does not let the libraries be preloaded
   set RUN_CMD = 'mpirun -np '
else
   set FINDPATH = 'readlink -f'
   set PRELOAD_COMMAND = 'LD_PRELOAD'
   set LD_LIBRARY_PATH_CMD = 'LD_LIBRARY_PATH'
   set RUN_CMD = '$GEOSBIN/esma_mpirun -np '
endif
set FV3SETUP = `$FINDPATH $0`
set BINDIR   = `dirname $FV3SETUP`
set GEOSDEF  = `dirname $BINDIR`
set ETCDIR   = ${GEOSDEF}/etc

# Test if StandAlone_FV3_Dycore.x is here which means you are in install directory
if (! -x ${BINDIR}/StandAlone_FV3_Dycore.x) then
   echo "You are trying to run $0 in the Applications/StandAlone_FV3_Dycore directory"
   echo "This is no longer supported. Please run from the bin/ directory"
   echo "in your installation"
   exit 1
endif

######################################################################
#                        Singularity Sandbox
#######################################################################

# This section is to determine if we are running in a Singularity
# sandbox by looking for the .singularity.d directory. If we are,
# then we set the SINGULARITY_SANDBOX environment variable to the
# path to the sandbox. If we are not, then we set it to an empty
# string.
#
# We also set the REAL_BIND_PATH and BASE_BIND_PATH environment
# variables. These are used to set the bind paths for Singularity
# runs. REAL_BIND_PATH is the physical path to the NOBACKUP directory
# and BASE_BIND_PATH is the physical path to the /gpfsm directory
# (needed for boundary conditions)

setenv KEYFILE ".singularity.d"
setenv singstat 0
setenv ORIGPATH `pwd -P`
cd $GEOSDEF
while ($singstat == 0)
   if (-d $KEYFILE) then
      setenv singstat 1
      setenv SINGPATH `pwd -P`
   endif
   if ($singstat == 0) then
      if ("$cwd" == "/") then
         break
      else
         cd ..
      endif
   endif
end
if ($singstat == 1) then
   setenv SINGULARITY_SANDBOX $SINGPATH
   setenv REAL_BIND_PATH `realpath $NOBACKUP`
   setenv BASE_BIND_PATH "/gpfsm"
else
   setenv SINGULARITY_SANDBOX ""
   setenv REAL_BIND_PATH ""
   setenv BASE_BIND_PATH ""
endif

cd $ORIGPATH

#######################################################################
#                   Test for Command Line Flags
#######################################################################

# Set default behavior of switches
set EXE_VERB = "copied"
set SINGULARITY_RUN_SITE = ""
if ($singstat == 1) then
   set USING_SINGULARITY = TRUE

   # If we are using Singularity, then where the image was built (say
   # AWS) might not match where we run. We at least know NCCS and NAS,
   # so we can use that to set the site.

   if (($NODE =~ discover*) || ($NODE =~ borg*) || ($NODE =~ warp*)) then
      set SINGULARITY_RUN_SITE = "NCCS"
   else if (($NODE =~ pfe*) || \
            ($NODE =~ r[0-9]*i[0-9]*n[0-9]*) || \
            ($NODE =~ r[0-9]*c[0-9]*t[0-9]*n[0-9]*)) then
      set SINGULARITY_RUN_SITE = "NAS"
   endif
else
   set USING_SINGULARITY = FALSE
endif

while ( $#argv > 0 )
   set arg = $argv[1]
   shift argv
   switch ( $arg )
      # Set our colors
      case -[Cc]:
      case --[Cc][Oo][Ll][Oo][Rr]:
         goto SETCOLOR

      # Here any string not above will trigger USAGE
      case -[Hh]:
      case --[Hh][Ee][Ll][Pp]:
      default:
         goto USAGE
   endsw
end

#######################################################################
#                        Determine site
#######################################################################

if ($SINGULARITY_RUN_SITE == "") then
   setenv SITE `awk '{print $2}' $ETCDIR/SITE.rc`
else
   setenv SITE $SINGULARITY_RUN_SITE
endif

#######################################################################
#                 Test for Compiler and MPI Setup
#######################################################################

# Get MPI stack from CMake
set MPI_STACK = @MPI_STACK@

#######################################################################
#               Enter Experiment Specific Run Parameters
#######################################################################

echo
echo "Enter the ${C1}Experiment ID${CN}:"
set EXPID = $<

DESC:
echo "Enter a 1-line ${C1}Experiment Description${CN}:"
set EXPTMP =  `echo $<`
if( $#EXPTMP == 0 ) goto DESC
set EXPDSC =  $EXPTMP[1]
foreach WORD ($EXPTMP)
if( $WORD !=  $EXPDSC ) set EXPDSC = `echo ${EXPDSC}_${WORD}`
end

#######################################################################
#          Continue to enter in experiment parameters
#######################################################################

HRCODE:
echo "Enter the ${C1}Horizontal Resolution${CN}: ${C2}IM${CN} (Default: 48)"
set   AGCM_IM = $<
if( .$AGCM_IM == . ) then
  set AGCM_IM = 48
endif

set CUBE_AGCM = ""
set AGCM_NF = 6
set GRID_TYPE = "Cubed-Sphere"

echo "Enter the ${C1}Vertical Resolution${CN}: ${C2}LM${CN} (Default: 72)"
set   AGCM_LM = $<
if( .$AGCM_LM == . ) then
  set AGCM_LM = 72
endif


#######################################################################
#         Test to see if you want to use non-hydrostatic
#######################################################################

ASKHYDRO:

set DEFAULT_NON_HYDROSTATIC = FALSE
echo "Do you wish to run ${C1}NON-HYDROSTATIC${CN} dynamics? (Default: ${C2}${DEFAULT_NON_HYDROSTATIC}${CN})"

set   DO_NONHYDRO  = $<
if( .$DO_NONHYDRO == . ) then
   set   DO_NONHYDRO  = $DEFAULT_NON_HYDROSTATIC
else
   set   DO_NONHYDRO  = `echo   $DO_NONHYDRO | tr "[:lower:]" "[:upper:]"`
   if(  $DO_NONHYDRO == "Y"     | \
        $DO_NONHYDRO == "YES"   | \
        $DO_NONHYDRO == "T"     | \
        $DO_NONHYDRO == "TRUE"  ) set DO_NONHYDRO = TRUE
   if(  $DO_NONHYDRO == "N"     | \
        $DO_NONHYDRO == "NO"    | \
        $DO_NONHYDRO == "F"     | \
        $DO_NONHYDRO == "FALSE" ) set DO_NONHYDRO = FALSE

   if( $DO_NONHYDRO != "TRUE" & $DO_NONHYDRO != "FALSE" ) then
      echo
      echo "${C1}NON-HYDROSTATIC${CN} must be set equal to ${C2}TRUE/YES${CN} or ${C2}FALSE/NO${CN}!"
      goto ASKHYDRO
   endif
endif

if ( $DO_NONHYDRO == "TRUE" ) then
   set USE_NONHYDRO = 1
else
   set USE_NONHYDRO = 0
endif

#######################################################################
#            Test to see if you want to use ioserver
#######################################################################

ASKIOS:

if ( $AGCM_IM < 180 ) then
   set DEFAULT_DO_IOS = FALSE
   echo "Do you wish to ${C1}IOSERVER${CN}? (Default: ${C2}NO${CN} or ${C2}FALSE${CN})"
else
   set DEFAULT_DO_IOS = TRUE
   echo "Do you wish to ${C1}IOSERVER${CN}? (Default: ${C2}YES${CN} or ${C2}TRUE${CN})"
endif

set   DO_IOS  = $<
if( .$DO_IOS == . ) then
   set   DO_IOS  = $DEFAULT_DO_IOS
else
   set   DO_IOS  = `echo   $DO_IOS | tr "[:lower:]" "[:upper:]"`
   if(  $DO_IOS == "Y"     | \
        $DO_IOS == "YES"   | \
        $DO_IOS == "T"     | \
        $DO_IOS == "TRUE"  ) set DO_IOS = TRUE
   if(  $DO_IOS == "N"     | \
        $DO_IOS == "NO"    | \
        $DO_IOS == "F"     | \
        $DO_IOS == "FALSE" ) set DO_IOS = FALSE

   if( $DO_IOS != "TRUE" & $DO_IOS != "FALSE" ) then
      echo
      echo "${C1}IOSERVER${CN} must be set equal to ${C2}TRUE/YES${CN} or ${C2}FALSE/NO${CN}!"
      goto ASKIOS
   endif
endif

if ( $DO_IOS == "TRUE" ) then
   set USE_IOSERVER = 1
else
   set USE_IOSERVER = 0
endif

#######################################################################
#                 What Processor Should We Run On?
#######################################################################

ASKPROC:

if ( $SITE == 'NCCS' ) then

   set BUILT_ON_SLES15 = @BUILT_ON_SLES15@

   if ("$BUILT_ON_SLES15" == "TRUE") then
      echo "Enter the ${C1}Processor Type${CN} you wish to run on:"
      echo "   ${C2}mil  (Milan)${CN} (default)"
      echo " "
      set MODEL = `echo $<`
      set MODEL = `echo $MODEL | tr "[:upper:]" "[:lower:]"`
      if ( .$MODEL == .) then
         set MODEL = 'mil'
      endif

      if( $MODEL != 'mil' ) goto ASKPROC

      if ($MODEL == 'mil') then
         # We save a couple processes for the kernel
         set NCPUS_PER_NODE = 126
      endif
   else
      echo "Enter the ${C1}Processor Type${CN} you wish to run on:"
      echo "   ${C2}sky  (Skylake)${CN}"
      echo "   ${C2}cas  (Cascade Lake) (default)${CN}"
      echo " "
      set MODEL = `echo $<`
      set MODEL = `echo $MODEL | tr "[:upper:]" "[:lower:]"`
      if ( .$MODEL == .) then
         set MODEL = 'cas'
      endif

      if( $MODEL != 'sky'  & \
          $MODEL != 'cas' ) goto ASKPROC

      if ($MODEL == 'sky') then
         set NCPUS_PER_NODE = 40
      else if ($MODEL == 'cas') then
         # NCCS currently recommends that users do not run with
         # 48 cores per node on SCU16 due to OS issues and
         # recommends that CPU-intensive works run with 46 or less
         # cores. As 45 is a multiple of 3, it's the best value
         # that doesn't waste too much
         #set NCPUS_PER_NODE = 48
         set NCPUS_PER_NODE = 45
      endif
   endif

else if ( $SITE == 'NAS' ) then

   echo "Enter the ${C1}Processor Type${CN} you wish to run on:"
   echo "   ${C2}has (Haswell)${CN}"
   echo "   ${C2}bro (Broadwell)${CN}"
   echo "   ${C2}sky (Skylake)${CN} (default)"
   echo "   ${C2}cas (Cascade Lake)${CN}"
   echo "   ${C2}rom (AMD Rome)${CN}"
   echo "   ${C2}mil (AMD Milan)${CN}"
   echo " "
   echo " NOTE Due to how FV3 is compiled by default, Sandy Bridge"
   echo "      and Ivy Bridge are not supported by current GEOS"
   echo " "
   set MODEL = `echo $<`
   set MODEL = `echo $MODEL | tr "[:upper:]" "[:lower:]"`
   if ( .$MODEL == .) then
      set MODEL = 'sky'
   endif

   if( $MODEL != 'has' & \
       $MODEL != 'bro' & \
       $MODEL != 'sky' & \
       $MODEL != 'cas' & \
       $MODEL != 'rom' & \
       $MODEL != 'mil' ) goto ASKPROC

   # Some processors have weird names at NAS
   # ---------------------------------------

   if ($MODEL == sky) then
      set MODEL = 'sky_ele'
   else if ($MODEL == cas) then
      set MODEL = 'cas_ait'
   else if ($MODEL == rom) then
      set MODEL = 'rom_ait'
   else if ($MODEL == mil) then
      set MODEL = 'mil_ait'
   endif

   if ($MODEL == 'has') then
      set NCPUS_PER_NODE = 24
   else if ($MODEL == 'bro') then
      set NCPUS_PER_NODE = 28
   else if ($MODEL == 'sky_ele') then
      set NCPUS_PER_NODE = 40
   else if ($MODEL == 'cas_ait') then
      set NCPUS_PER_NODE = 40
   else if ($MODEL == 'rom_ait') then
      set NCPUS_PER_NODE = 128
   else if ($MODEL == 'mil_ait') then
      set NCPUS_PER_NODE = 128
   endif

else if( $SITE == 'AWS' | $SITE == 'Azure' ) then

   # Because we do not know the name of the model or the number of CPUs
   # per node. We ask the user to set these variables in the script

   # AWS and Azure users must set the MODEL and NCPUS_PER_NODE
   set MODEL = USER_MUST_SET
   set NCPUS_PER_NODE = USER_MUST_SET

   # Above we need a user to set the MODEL and NCPUS_PER_NODE
   # variables. Here we check that they have been set. If not,
   # we ask the user to set them
   # --------------------------------------------------------

   if ( $MODEL == USER_MUST_SET | $NCPUS_PER_NODE == USER_MUST_SET ) then
      echo "ERROR: We have detected you are on $SITE. As we do not have"
      echo "       official fixed node info yet, we ask you to edit $0"
      echo "       and set the MODEL and NCPUS_PER_NODE variables."
      echo "       Look for the section that says:"
      echo " "
      echo "       # AWS and Azure users must set the MODEL and NCPUS_PER_NODE"
      exit 1
   endif

else
   set MODEL = 'UNKNOWN'
   # As we do not know how many CPUs per node, we detect the number
   # of CPUs per node by looking at the number of CPUs. This is different
   # on Linux and macOS
   if ( $ARCH == 'Linux' ) then
      set NCPUS_PER_NODE = `grep -c ^processor /proc/cpuinfo`
   else if ( $ARCH == 'Darwin' ) then
      set NCPUS_PER_NODE = `sysctl -n hw.ncpu`
   else
      echo "ERROR: Unknown architecture $ARCH"
      exit 1
   endif
endif

# Set DEFAULT SHMEM Parameter
# ---------------------------
set USE_SHMEM = 0

# Set Default Readers and Writers
# -------------------------------
set NUM_READERS = 1
set NUM_WRITERS = 1

# Set DEFAULT IOSERVER Parameters
# -------------------------------
set DEF_IOS_NDS = 1

# Default Run Parameters
# ----------------------
set AGCM_JM  = `expr $AGCM_IM \* 6`
set HIST_IM  = `expr $AGCM_IM \* 4`
set HIST_JM  = `expr $AGCM_IM \* 2 + 1`

if( $AGCM_IM <=  12 ) then
   set DT = 900
   set FV_NX = 2
else if( $AGCM_IM <=  24 ) then
   set DT = 900
   set FV_NX = 4
else if( $AGCM_IM <=  48 ) then
   set DT = 450
   set FV_NX = 4
else if( $AGCM_IM <=  90 ) then
   set DT = 450
   set FV_NX = 4
else if( $AGCM_IM <=  180 ) then
   set DT = 450
   set FV_NX = 6
   set NUM_READERS = 2
   set DEF_IOS_NDS = 2
else if( $AGCM_IM <= 360 ) then
   set DT = 450
   set FV_NX = 12
   set NUM_READERS = 4
   set DEF_IOS_NDS = 2
else if( $AGCM_IM <= 500 ) then
   set DT = 450
   set FV_NX = 12
   set NUM_READERS = 4
   set USE_SHMEM = 1
   set DEF_IOS_NDS = 2
else if( $AGCM_IM <= 720 ) then
   set DT = 450
   set FV_NX = 16
   set NUM_READERS = 6
   set USE_SHMEM = 1
   set DEF_IOS_NDS = 3
else if( $AGCM_IM <= 1440 ) then
   set DT = 450
   set FV_NX = 30
   set NUM_READERS = 6
   set USE_SHMEM = 1
   set DEF_IOS_NDS = 4
else if( $AGCM_IM <= 1536 ) then
   set DT = 90
   set FV_NX = 64
   set NUM_READERS = 6
   set USE_SHMEM = 1
   set DEF_IOS_NDS = 4
else
   set DT = 45
   set FV_NX = 64
   set NUM_READERS = 6
   set USE_SHMEM = 1
   set DEF_IOS_NDS = 5
endif

# On desktop, we default to 6 processes
# Must be set here due to MODEL_NPES calc below
if( $SITE != 'NAS' && $SITE != 'NCCS' && $SITE != 'AWS' && $SITE != 'Azure' ) then
   set FV_NX = 1
endif

set FV_NY = `expr $FV_NX \* 6`

set AGCM_GRIDNAME   = "PE${AGCM_IM}x${AGCM_JM}-CF"

set FV_PRECISION = @CFG_FV_PRECISION@

#######################################################################
#                  Architecture Specific Variables
#######################################################################

@ MODEL_NPES = $FV_NX * $FV_NY

if ( $DO_IOS == TRUE ) then
   set IOS_NDS = $DEF_IOS_NDS
else
   set IOS_NDS = 0
endif

setenv    RUN_N  $EXPID # RUN Job Name

if( $SITE == 'NAS' ) then
   setenv RUN_N            `echo $EXPID | cut -b1-200`_RUN # RUN Job Name
   setenv BATCH_CMD        "qsub"                          # PBS Batch command
   setenv BATCH_GROUP      "PBS -W group_list="            # PBS Syntax for GROUP
   setenv BATCH_TIME       "PBS -l walltime="              # PBS Syntax for walltime
   setenv BATCH_JOBNAME    "PBS -N"                        # PBS Syntax for job name
   setenv BATCH_OUTPUTNAME "PBS -o"                        # PBS Syntax for job output name
   setenv BATCH_JOINOUTERR "PBS -j oe -k oed"              # PBS Syntax for joining output and error
   setenv RUN_T            "1:00:00"                       # Wallclock Time for fv3.j

   set QTYPE = "normal" # Queue to use

   @ NODES  = `echo "( ($MODEL_NPES + $NCPUS_PER_NODE) + ($IOS_NDS * $NCPUS_PER_NODE) - 1)/$NCPUS_PER_NODE" | bc`

   setenv RUN_Q "PBS -q ${QTYPE}"                                                                              # batch queue name for fv3.j
   setenv RUN_P "PBS -l select=${NODES}:ncpus=${NCPUS_PER_NODE}:mpiprocs=${NCPUS_PER_NODE}:model=${MODEL}"     # PE Configuration for fv3.j

   setenv WRKDIR /nobackup/$LOGNAME # user work directory

else if( $SITE == 'NCCS' ) then
   setenv BATCH_CMD        "sbatch"             # SLURM Batch command
   setenv BATCH_GROUP      "SBATCH --account="  # SLURM Syntax for account name
   setenv BATCH_TIME       "SBATCH --time="     # SLURM Syntax for walltime
   setenv BATCH_JOBNAME    "SBATCH --job-name=" # SLURM Syntax for job name
   setenv BATCH_OUTPUTNAME "SBATCH --output="   # SLURM Syntax for job output name
   setenv BATCH_JOINOUTERR "DELETE"             # SLURM joins out and err by default
   setenv RUN_T            "01:00:00"           # Wallclock Time   for fv3.j

   @ NODES  = `echo "( ($MODEL_NPES + $NCPUS_PER_NODE) + ($IOS_NDS * $NCPUS_PER_NODE) - 1)/$NCPUS_PER_NODE" | bc`

   setenv RUN_Q "SBATCH --constraint=${MODEL}"                                # batch queue name for fv3.j
   setenv RUN_P "SBATCH --nodes=${NODES} --ntasks-per-node=${NCPUS_PER_NODE}" # PE Configuration for fv3.j

   setenv WRKDIR /discover/nobackup/$LOGNAME # user work directory

else if( $SITE == 'AWS' | $SITE == "Azure" ) then
   setenv BATCH_CMD        "sbatch"             # SLURM Batch command
   setenv BATCH_GROUP      "DELETE"             # SLURM Syntax for account name
   setenv BATCH_TIME       "SBATCH --time="     # SLURM Syntax for walltime
   setenv BATCH_JOBNAME    "SBATCH --job-name=" # SLURM Syntax for job name
   setenv BATCH_OUTPUTNAME "SBATCH --output="   # SLURM Syntax for job output name
   setenv BATCH_JOINOUTERR "DELETE"             # SLURM joins out and err by default
   setenv RUN_T            "01:00:00"           # Wallclock Time   for fv3.j

   @ NODES  = `echo "( ($MODEL_NPES + $NCPUS_PER_NODE) + ($IOS_NDS * $NCPUS_PER_NODE) - 1)/$NCPUS_PER_NODE" | bc`

   setenv RUN_Q "SBATCH --constraint=${MODEL}"                                # batch queue name for fv3.j
   setenv RUN_P "SBATCH --nodes=${NODES} --ntasks-per-node=${NCPUS_PER_NODE}" # PE Configuration for fv3.j

   setenv WRKDIR /home/$LOGNAME # user work directory

else
# These are defaults for others (assume slurm)
   setenv BATCH_CMD        "sbatch"             # SLURM Batch command
   setenv BATCH_GROUP      "SBATCH --account="  # SLURM Syntax for account name
   setenv BATCH_TIME       "SBATCH --time="     # SLURM Syntax for walltime
   setenv BATCH_JOBNAME    "SBATCH --job-name=" # SLURM Syntax for job name
   setenv BATCH_OUTPUTNAME "SBATCH --output="   # SLURM Syntax for job output name
   setenv BATCH_JOINOUTERR "DELETE"             # SLURM joins out and err by default
   setenv RUN_T            "01:00:00"           # Wallclock Time   for fv3.j

   setenv RUN_Q "DELETE"
   setenv RUN_P "SBATCH --ntasks=${MODEL_NPES}" # PE Configuration for fv3.j

   # By default on desktop, just ignore IOSERVER for now until testing
   set USE_IOSERVER   = 0
   set IOS_NDS        = 0

   setenv WRKDIR /home/$LOGNAME # user work directory
endif

#######################################################################
#                 Create Paths for EXP Directories
#######################################################################

# EXP Directory
# -------------
    set check =  FALSE
while( $check == FALSE )
  if( -e $HOME/.EXPDIRroot ) then
         set EXPDIRroot = `cat $HOME/.EXPDIRroot`
  else
         set EXPDIRroot = $WRKDIR
  endif
  setenv EXPDIR_def $EXPDIRroot/$EXPID
  echo ""
  echo "Enter Desired Location for the ${C1}EXPERIMENT${CN} Directory"
  echo "Hit ENTER to use Default Location:"
  echo "----------------------------------"
  echo "Default:  ${C2}${EXPDIR_def}${CN}"
  set   NUEXPDIR  = $<
  if( .$NUEXPDIR != . ) then
       setenv EXPDIR     $NUEXPDIR
       setenv EXPDIR_def $NUEXPDIR
  else
       setenv EXPDIR  $EXPDIR_def
  endif

  if( "$EXPID" != `basename $EXPDIR` ) then
       echo "\!\! The ${C1}EXPERIMENT${CN} Directory MUST point to the ${C1}EXPID${CN}: ${C2}${EXPID}${CN}"
       echo " "
  else
      set check = TRUE
  endif
end
mkdir -p $EXPDIR

# Build EXP Root Directory
# ------------------------
@ n = 1
set root = `echo $EXPDIR | cut -d / -f$n`
while( .$root == . )
@ n = $n + 1
set root = `echo $EXPDIR | cut -d / -f$n`
end

set EXPDIRroot = ''
while( $root != $EXPID )
set EXPDIRroot = `echo ${EXPDIRroot}/${root}`
@ n = $n + 1
set root = `echo $EXPDIR | cut -d / -f$n`
end
if( -e $HOME/.EXPDIRroot ) /bin/rm $HOME/.EXPDIRroot
echo $EXPDIRroot > $HOME/.EXPDIRroot

#######################################################################
#                       Locate Build Directory
#######################################################################

set     GEOSDIR  = $GEOSDEF
setenv GEOSSRC  ${GEOSDIR}

#######################################################################
#                    Check for Group ID Sponsor Code
#         Note: Default GROUP will be kept in $HOME/.GROUProot
#######################################################################

       set GROUPS    = `groups`
if( -e $HOME/.GROUProot ) then
       set GROUProot = `cat $HOME/.GROUProot`
else
       set GROUProot = $GROUPS[1]
endif

echo " "
echo "Current GROUPS: ${GROUPS}"
echo "Enter your ${C1}GROUP ID${CN} for Current EXP: (Default: ${C2}${GROUProot}${CN})"
echo "-----------------------------------"
set   NUGROUP  = $<
if( .$NUGROUP != . ) then
     setenv GROUP $NUGROUP
else
     setenv GROUP $GROUProot
endif

if( -e $HOME/.GROUProot ) /bin/rm $HOME/.GROUProot
echo $GROUP > $HOME/.GROUProot

#######################################################################
#                  Set some singularity variables
#######################################################################

# Copy or link GEOSgcm.x if USING_SINGULARITY is FALSE
if ( $USING_SINGULARITY == FALSE ) then
   # Set a couple variables for sed'ing out bits of the run script
   set SINGULARITY_BUILD = "#DELETE"
   set NATIVE_BUILD = ""
else
   # Set a couple variables for sed'ing out bits of the run script
   set SINGULARITY_BUILD = ""
   set NATIVE_BUILD = "#DELETE"
endif

#######################################################################
#               Set Recommended MPI Stack Settings
#######################################################################

# By default do not write restarts by oserver
set RESTART_BY_OSERVER = NO

/bin/rm -f $EXPDIR/SETENV.commands

if( $MPI_STACK == openmpi ) then

# Open MPI and GEOS has issues with restart writing. Having the
# oserver write them can be orders of magnitude faster

set RESTART_BY_OSERVER = YES

# Testing by Bill Putman determined some useful
# Open MPI parameters. Testing shows these work
# on both OSs at NCCS and on macOS

cat > $EXPDIR/SETENV.commands << EOF
# Turn off warning about TMPDIR on NFS
setenv OMPI_MCA_shmem_mmap_enable_nfs_warning 0
# pre-connect MPI procs on mpi_init
setenv OMPI_MCA_mpi_preconnect_all 1
setenv OMPI_MCA_coll_tuned_bcast_algorithm 7
setenv OMPI_MCA_coll_tuned_scatter_algorithm 2
setenv OMPI_MCA_coll_tuned_reduce_scatter_algorithm 3
setenv OMPI_MCA_coll_tuned_allreduce_algorithm 3
setenv OMPI_MCA_coll_tuned_allgather_algorithm 4
setenv OMPI_MCA_coll_tuned_allgatherv_algorithm 3
setenv OMPI_MCA_coll_tuned_gather_algorithm 1
setenv OMPI_MCA_coll_tuned_barrier_algorithm 0
# required for a tuned flag to be effective
setenv OMPI_MCA_coll_tuned_use_dynamic_rules 1
# disable file locks
setenv OMPI_MCA_sharedfp "^lockedfile,individual"
EOF

# The below settings seem to be recommended for hybrid
# systems using MVAPICH but could change

else if( $MPI_STACK == mvapich ) then

# MVAPICH and GEOS has issues with restart writing. Having the
# oserver write them seems to...work
set RESTART_BY_OSERVER = YES

cat > $EXPDIR/SETENV.commands << EOF
setenv MV2_ENABLE_AFFINITY 0
setenv SLURM_DISTRIBUTION block
setenv MV2_MPIRUN_TIMEOUT 100
setenv MV2_GATHERV_SSEND_THRESHOLD 256
EOF

else if( $MPI_STACK == mpt ) then

cat > $EXPDIR/SETENV.commands << EOF

setenv MPI_COLL_REPRODUCIBLE
setenv SLURM_DISTRIBUTION block

#setenv MPI_DISPLAY_SETTINGS 1
#setenv MPI_VERBOSE 1

setenv MPI_MEMMAP_OFF
unsetenv MPI_NUM_MEMORY_REGIONS
setenv MPI_XPMEM_ENABLED yes
unsetenv SUPPRESS_XPMEM_TRIM_THRESH

setenv MPI_LAUNCH_TIMEOUT 40

setenv MPI_COMM_MAX  1024
setenv MPI_GROUP_MAX 1024
setenv MPI_BUFS_PER_PROC 256

# For some reason, PMI_RANK is randomly set and interferes
# with binarytile.x and other executables.
unsetenv PMI_RANK

# Often when debugging on MPT, the traceback from Intel Fortran
# is "absorbed" and only MPT's errors are displayed. To allow the
# compiler's traceback to be displayed, uncomment this environment
# variable
#setenv FOR_IGNORE_EXCEPTIONS false

EOF

else if( $MPI_STACK == intelmpi ) then

cat > $EXPDIR/SETENV.commands << EOF
setenv I_MPI_ADJUST_ALLREDUCE 12
setenv I_MPI_ADJUST_GATHERV 3

# This flag prints out the Intel MPI state. Uncomment if needed
#setenv I_MPI_DEBUG 9
EOF

# These are options determined to be useful at NCCS
# Not setting generally as they are more fabric/cluster
# specific compared to the above adjustments
if ( $SITE == 'NCCS' ) then

cat >> $EXPDIR/SETENV.commands << EOF
setenv I_MPI_SHM_HEAP_VSIZE 512
setenv PSM2_MEMORY large
EOF

# Testing at NCCS showed these caused a crash at higher resolutions at
# restart read
if ( $USING_SINGULARITY == FALSE ) then

cat >> $EXPDIR/SETENV.commands << EOF
setenv I_MPI_EXTRA_FILESYSTEM 1
setenv I_MPI_EXTRA_FILESYSTEM_FORCE gpfs
EOF

endif # if NOT Singularity

# Testing by Bill Putman found these to be
# useful flags with Intel MPI on SLES15 on the
# Milan nodes.
# Note 1: Testing by NCCS shows the PSM3 provider
# runs on the Infiniband fabric. Tests show it runs
# up to C720.
# Note 2: When the Cascade Lakes are moved to
# SLES15, these will need to be Milan-only flags
# as Intel MPI will probably work just fine with
# Intel chips.
if ("$BUILT_ON_SLES15" == "TRUE") then
cat >> $EXPDIR/SETENV.commands << EOF
setenv I_MPI_FALLBACK 0
setenv I_MPI_FABRICS ofi
setenv I_MPI_OFI_PROVIDER psm3
setenv I_MPI_ADJUST_SCATTER 2
setenv I_MPI_ADJUST_SCATTERV 2
setenv I_MPI_ADJUST_GATHER 2
setenv I_MPI_ADJUST_GATHERV 3
setenv I_MPI_ADJUST_ALLGATHER 3
setenv I_MPI_ADJUST_ALLGATHERV 3
setenv I_MPI_ADJUST_ALLREDUCE 12
setenv I_MPI_ADJUST_REDUCE 10
setenv I_MPI_ADJUST_BCAST 11
setenv I_MPI_ADJUST_REDUCE_SCATTER 4
setenv I_MPI_ADJUST_BARRIER 9
EOF

endif # if SLES15

endif # if NCCS

endif # if mpi


#######################################################################
#               Create Local Scripts and Resource Files
#######################################################################

cat >      $EXPDIR/sedfile << EOF
/@SETENVS/ {
t success
: success
r $EXPDIR/SETENV.commands
d
}

s?@EXPID?$EXPID?g
s?@RUN_N?$RUN_N?g
s?@RUN_T?$RUN_T?g
s?@RUN_P?$RUN_P?g
s?@RUN_Q?$RUN_Q?g
s?@EXPDIR?$EXPDIR?g
s?@EXPDSC?$EXPDSC?g
s?@BATCH_GROUP?${BATCH_GROUP}${GROUP}?g
s?@BATCH_TIME?$BATCH_TIME?g
s?@BATCH_CMD?$BATCH_CMD?g
s?@BATCH_JOBNAME?$BATCH_JOBNAME?g
s?@BATCH_OUTPUTNAME?$BATCH_OUTPUTNAME?g
s?@BATCH_JOINOUTERR?$BATCH_JOINOUTERR?g
s?@SITE?$SITE?g
s?@GEOSDIR?$GEOSDIR?g
s?@SINGULARITY_BUILD?$SINGULARITY_BUILD?g
s?@NATIVE_BUILD?$NATIVE_BUILD?g
s?@SINGULARITY_SANDBOX?$SINGULARITY_SANDBOX?g
s?@REAL_BIND_PATH?$REAL_BIND_PATH?g
s?@LD_LIBRARY_PATH_CMD?$LD_LIBRARY_PATH_CMD?g

s^@AGCM_GRIDNAME^$AGCM_GRIDNAME^g

s^@BOOT^YES^g
s/@DT/$DT/g
s/@FV_NX/$FV_NX/g
s/@FV_NY/$FV_NY/g
s/@FV_PRECISION/$FV_PRECISION/g
s/@USE_SHMEM/$USE_SHMEM/g
s/@USE_IOSERVER/$USE_IOSERVER/g
s/@USE_NONHYDRO/$USE_NONHYDRO/g
s/@IOS_NDS/$IOS_NDS/g
s/@NCPUS_PER_NODE/$NCPUS_PER_NODE/g
s/@NUM_READERS/$NUM_READERS/g
s/@NUM_WRITERS/$NUM_WRITERS/g
s?>>>CUBE_AGCM<<<?$CUBE_AGCM?g
s/@GRID_TYPE/$GRID_TYPE/g
s/@AGCM_NF/$AGCM_NF/g
s/@AGCM_IM/$AGCM_IM/g
s/@AGCM_JM/$AGCM_JM/g
s/@AGCM_LM/$AGCM_LM/g
s/@HIST_IM/$HIST_IM/g
s/@HIST_JM/$HIST_JM/g

EOF

set FILES = "fv3.j"
set FILES = `echo $FILES`

echo " "

# Operate on files in ETCDIR

foreach FILE ($FILES)

   /bin/rm -f $EXPDIR/tmpfile
   /bin/rm -f $EXPDIR/$FILE

   if ( -e $BINDIR/$FILE ) then
      cat       $BINDIR/$FILE > $EXPDIR/tmpfile
   else if ( -e $ETCDIR/$FILE ) then
      cat       $ETCDIR/$FILE > $EXPDIR/tmpfile
   else
      echo "ERROR! Cannot find $FILE in $BINDIR or $ETCDIR!"
      exit 2
   endif

   sed -f $EXPDIR/sedfile $EXPDIR/tmpfile > $EXPDIR/$FILE

   echo "Creating ${C1}${FILE}${CN} for Experiment: $EXPID "
   chmod 755 $EXPDIR/$FILE

end

/bin/rm -f $EXPDIR/SETENV.commands

echo $EXPDIR > $EXPDIR/.EXPDIR
echo " "

#######################################################################
#                 Produce Final script and .rc files
#######################################################################

# Delete or Enable EXP Configuration Variables
# --------------------------------------------
    set FILES = "fv3.j"
foreach FILE ($FILES)

if( -e $EXPDIR/$FILE ) set LOCDIR = $EXPDIR

/bin/rm -f $LOCDIR/$FILE.tmp
/bin/mv -f $LOCDIR/$FILE $LOCDIR/$FILE.tmp
    cat    $LOCDIR/$FILE.tmp | awk '{ if ( $1  !~ "#DELETE") { print } }' > $LOCDIR/$FILE
/bin/rm -f $LOCDIR/$FILE.tmp

end

chmod   +x $EXPDIR/fv3.j

#######################################################################
#                       Echo Settings and Messages
#######################################################################

echo "Done!"
echo "-----"
echo ""
echo "You can find your experiment in the directory:"
echo "      ${C2}${EXPDIR}${CN}"
echo ""
echo "NOTE: fv3.j by default will run StandAlone_FV3_Dycore.x from the installation directory:"
echo "      $GEOSBIN"
echo ""
echo "      However, if you copy an executable into the experiment directory, the script will"
echo "      run that executable instead."

#######################################################################
#                              Clean-Up
#######################################################################

if( -e $EXPDIR/tmpfile ) /bin/rm $EXPDIR/tmpfile
if( -e $EXPDIR/sedfile ) /bin/rm $EXPDIR/sedfile

exit

# ------------------------------------------
# Set a trap to remove the tempfiles on EXIT
# ------------------------------------------
TRAP:
   echo "Interrupt received, cleaning up temporary files"
   /bin/rm $FILES_TO_PROCESS $OLDEXPFILES $NEWEXPFILES $COPYSCRIPT $SEDFILE
   exit 1

SETCOLOR:
echo
echo "\033[1;4mGCM Setup Utility${RESET}"
echo
echo "Enter Desired Color Codes for ${BOLD}Highlighted${RESET} and ${BOLD}Default${RESET} text:"
echo
echo "${BOLD}Highlighted${RESET} Text Color: ${BLACK}0 BLACK${RESET}"
echo "                 Color: ${RED}1 RED${RESET}"
echo "                 Color: ${GREEN}2 GREEN${RESET}"
echo "                 Color: ${YELLOW}3 YELLOW${RESET}"
echo "                 Color: ${BLUE}4 BLUE${RESET}"
echo "                 Color: ${MAGENTA}5 MAGENTA${RESET}"
echo "                 Color: ${CYAN}6 CYAN${RESET}"
echo "                 Color: ${WHITE}7 WHITE${RESET}"
echo "                 Color: ${RESET}8 No Color"
set C1 = $<
  @ C1 = $C1 + 1
echo
echo "    ${BOLD}Default${RESET} Text Color: ${BLACK}0 BLACK${RESET}"
echo "                 Color: ${RED}1 RED${RESET}"
echo "                 Color: ${GREEN}2 GREEN${RESET}"
echo "                 Color: ${YELLOW}3 YELLOW${RESET}"
echo "                 Color: ${BLUE}4 BLUE${RESET}"
echo "                 Color: ${MAGENTA}5 MAGENTA${RESET}"
echo "                 Color: ${CYAN}6 CYAN${RESET}"
echo "                 Color: ${WHITE}7 WHITE${RESET}"
echo "                 Color: ${RESET}8 No Color"
set C2 = $<
  @ C2 = $C2 + 1
if( -e $HOME/.FV3SETUP ) /bin/rm -f $HOME/.FV3SETUP
touch $HOME/.FV3SETUP
echo $COLORS[$C1] >> $HOME/.FV3SETUP
echo $COLORS[$C2] >> $HOME/.FV3SETUP
exit 1

USAGE:
cat <<EOF
fv3_setup, a setup script for the GEOS-5 FV3 Standalone

   Usage: $0:t [optional flag]

   -c --color        Set the colors for $0:t
   -s --site <site>  Override the site for $0:t (valid values: NCCS, NAS, AWS, Azure)
   -h --help         Show usage

   If invoked alone, the script runs as normal.

   For more information, please contact Matt Thompson.

EOF
exit 1
